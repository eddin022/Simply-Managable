[{"C:\\Users\\casey\\Desktop\\Engineering Projects\\Todo Lists\\Simply Manageable\\client\\src\\index.js":"1","C:\\Users\\casey\\Desktop\\Engineering Projects\\Todo Lists\\Simply Manageable\\client\\src\\App.js":"2","C:\\Users\\casey\\Desktop\\Engineering Projects\\Todo Lists\\Simply Manageable\\client\\src\\components\\todos.jsx":"3","C:\\Users\\casey\\Desktop\\Engineering Projects\\Todo Lists\\Simply Manageable\\client\\src\\components\\todoCard.jsx":"4"},{"size":211,"mtime":1679711794392,"results":"5","hashOfConfig":"6"},{"size":171,"mtime":1679889741222,"results":"7","hashOfConfig":"6"},{"size":10763,"mtime":1680062772705,"results":"8","hashOfConfig":"6"},{"size":1019,"mtime":1679969172227,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"mdf0tj",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},"C:\\Users\\casey\\Desktop\\Engineering Projects\\Todo Lists\\Simply Manageable\\client\\src\\index.js",[],[],"C:\\Users\\casey\\Desktop\\Engineering Projects\\Todo Lists\\Simply Manageable\\client\\src\\App.js",["25"],[],"import logo from './logo.svg';\nimport TodoList from './components/todos';\n\nfunction App() {\n  return (\n    <div>\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\casey\\Desktop\\Engineering Projects\\Todo Lists\\Simply Manageable\\client\\src\\components\\todos.jsx",["26"],[],"import React from \"react\";\r\nimport {useState,useEffect} from 'react';\r\nimport axios from 'axios'\r\nimport TodoCard from \"./todoCard\";\r\nimport '../App.css';\r\n\r\n\r\nfunction TodoList() {\r\n    const [todos,setTodos] = useState([]);\r\n    const [data,setData] = useState({ title: '', description: '', list:''});\r\n    const [update,setUpdate] = useState(false);\r\n    const [render,setRender] = useState(false);\r\n    const [formStatus,setFormStatus] = useState({\r\n        button: true,\r\n        inTodo: false,\r\n        inProgress: false,\r\n        inComplete: false\r\n    });\r\n\r\n    const todoListCheck = document.getElementById('inTodoList');\r\n    const inProgressListCheck = document.getElementById('inProgressList');\r\n    const inCompleteListCheck = document.getElementById('inCompleteList');\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        let dueDate = document.getElementById('dueDate');\r\n        data.dueDate= dueDate.value;\r\n        axios({\r\n            method: 'post',\r\n            url:'https://simply-managable.herokuapp.com/api/todo',\r\n            data:{\r\n                title: data.title,\r\n                description: data.description,\r\n                list: data.list,\r\n                dueDate: data.dueDate\r\n            }\r\n        });\r\n        axios\r\n                .get(\"https://simply-managable.herokuapp.com/api/todo\")\r\n                .then((res) => {\r\n                    console.log(res.data);\r\n                    setTodos(res.data);\r\n                })\r\n                .catch((err) => {\r\n                    console.log(err.message);\r\n                });\r\n        if (update) {\r\n            setUpdate(false)\r\n        }else{\r\n            setUpdate(true)\r\n        } \r\n        setData({\r\n            title:'',description:'',list:'',dueDate:''\r\n        });\r\n        inProgressListCheck.checked=false;\r\n        inCompleteListCheck.checked=false;\r\n        todoListCheck.checked=false;\r\n    };\r\n\r\n    useEffect(\r\n        function () {\r\n            axios\r\n                .get(\"https://simply-managable.herokuapp.com/api/todo\")\r\n                .then((res) => {\r\n                    console.log(res.data);\r\n                    setTodos(res.data);\r\n                })\r\n                .catch((err) => {\r\n                    console.log(err.message);\r\n                });\r\n        },\r\n        [update]\r\n    );\r\n\r\n    let todo = [];\r\n    let inProgress = [];\r\n    let complete = [];\r\n    \r\n    for (let i = 0; i < todos.length; i++) {\r\n        if (todos[i].list === 'Todo'){\r\n            todo = [...todo,todos[i]]\r\n        };\r\n\r\n        if (todos[i].list === 'InProgress'){\r\n            inProgress = [...inProgress,todos[i]]\r\n        };\r\n        if (todos[i].list === 'Complete'){\r\n            complete = [...complete,todos[i]]\r\n        };\r\n    };\r\n\r\n    function handleChange(e) {\r\n        setData((data) => ({...data, [e.target.name]: e.target.value}));\r\n    };\r\n\r\n    const handleTodoListCheck = (e) => {\r\n        inProgressListCheck.checked=false;\r\n        inCompleteListCheck.checked=false;\r\n        setFormStatus(existingValues => ({\r\n            ...existingValues,\r\n            button:false\r\n        }))\r\n\r\n        setData(existingValues => ({\r\n            ...existingValues,\r\n            list:'Todo'\r\n        }));\r\n\r\n        if(!todoListCheck.checked){\r\n            setFormStatus(existingValues => ({\r\n                ...existingValues,\r\n                button:true\r\n            })); \r\n        };\r\n    };\r\n\r\n    const handleInProgressListCheck = (e) => {\r\n        todoListCheck.checked=false\r\n        inCompleteListCheck.checked=false\r\n        setFormStatus(existingValues => ({\r\n            ...existingValues,\r\n            button:false\r\n        }))\r\n\r\n        setData(existingValues => ({\r\n            ...existingValues,\r\n            list:'InProgress'\r\n        }));\r\n\r\n        if(!inProgressListCheck.checked){\r\n            setFormStatus(existingValues => ({\r\n                ...existingValues,\r\n                button:true\r\n            })); \r\n        };\r\n    };\r\n\r\n    const handleInCompleteListCheck = (e) => {\r\n        inProgressListCheck.checked=false\r\n        todoListCheck.checked=false\r\n        setFormStatus(existingValues => ({\r\n            ...existingValues,\r\n            button:false\r\n        }))\r\n\r\n        setData(existingValues => ({\r\n            ...existingValues,\r\n            list:'Complete'\r\n        }));\r\n\r\n        if(!inCompleteListCheck.checked){\r\n            setFormStatus(existingValues => ({\r\n                ...existingValues,\r\n                button:true\r\n            })); \r\n        };\r\n    };\r\n\r\n    function handleDelete(e) {\r\n        console.log('BELOW')\r\n        console.log(todos)\r\n        axios.delete(`https://simply-managable.herokuapp.com/api/todo/${e.target.name}`);\r\n        setTodos((data) => {\r\n            return data.filter((todo) => todo._id !== e.target.name);\r\n        });\r\n    };\r\n\r\n    function handleMove(e) {\r\n        let mover = e.target.value\r\n        let moverId = e.target.name\r\n\r\n //       if (mover==='ignore'){\r\n   //         return\r\n     //   }\r\n        \r\n        for (let i = 0; i < todos.length; i++) {\r\n            if ((todos[i]._id === moverId)&&(mover !== 'ignore')){\r\n                todos[i].list=mover\r\n    \r\n                const newTodo = {\r\n                    title: todos[i].title,\r\n                    description: todos[i].description,\r\n                    list: mover,\r\n                    dueDate: todos[i].dueDate\r\n                };\r\n                axios.put(`https://simply-managable.herokuapp.com/api/todo/${moverId}`,newTodo)\r\n                console.log(newTodo)\r\n                if (render) {\r\n                    setRender(false)\r\n                }else{\r\n                    setRender(true)\r\n                }\r\n            }  \r\n        }\r\n    };\r\n\r\n    const current = new Date();\r\n    const date1 =  `${current.getMonth()+1}/${current.getDate()}`;\r\n    const date2 =  `${current.getMonth()+1}/${current.getDate()+1}`;\r\n    const date3 =  `${current.getMonth()+1}/${current.getDate()+2}`;\r\n    const date4 =  `${current.getMonth()+1}/${current.getDate()+3}`;\r\n    const date5 =  `${current.getMonth()+1}/${current.getDate()+4}`;\r\n    const date6 =  `${current.getMonth()+1}/${current.getDate()+5}`;\r\n    const date7 =  `${current.getMonth()+1}/${current.getDate()+6}`;\r\n    const dates = [date1,date2,date3,date4,date5,date6,date7]\r\n\r\n    const showDates = () => {\r\n        for (let i = 0; i < todos.length; i++) {\r\n            let temp = todos[i].dueDate\r\n            let monthDay = `${temp.split('-')[1]}/${temp.split('-')[2]}`\r\n            for (let j = 0; j < dates.length; j++){\r\n                if (`0${dates[j]}` === monthDay){\r\n                    console.log('jes')\r\n                    console.log(todos[i])\r\n                    //make a dateCard and map over it\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className='App'>\r\n            <div>\r\n                <h1 className=\"main-header\">Simply Manageable</h1>\r\n            </div>\r\n            <div className=\"flex-container\">\r\n                <form className='form' onSubmit={handleSubmit}>\r\n                    <h1 style={{textDecoration: 'underline', textDecorationColor: 'azure'}} >Add </h1>\r\n                    <div>\r\n                        <input type='checkbox' value='inTodoList' id='inTodoList' name='inTodoList' onClick={handleTodoListCheck} />\r\n                        <label for='inTodoList'> Todo </label>\r\n                    </div>\r\n                    <div>\r\n                        <input type='checkbox' value='inProgressList' id='inProgressList' name='inProgressList'  onClick={handleInProgressListCheck} />\r\n                        <label for ='inProgressList'> In Progress </label>\r\n                    </div>\r\n                    <div>\r\n                        <input type='checkbox' value='inCompleteList' id='inCompleteList' name='inCompleteList'  onClick={handleInCompleteListCheck} />\r\n                        <label for ='inCompleteList'> Complete </label>\r\n                    </div>\r\n                    <br/>\r\n                    <div>\r\n                        <input className=\"formInput\" type='text' placeholder='Todo Name' name='title' value={data.title} onChange={handleChange} />\r\n                    </div>\r\n                    <div>\r\n                        <input className=\"formInput\" type='text' placeholder='Todo Description' name='description' value={data.description} onChange={handleChange} />                \r\n                    </div>\r\n                    <div>\r\n                        <input className=\"formDate\" type='date' placeholder='Due Date' name='date' id=\"dueDate\"/>\r\n                    </div>\r\n                    <br/>\r\n                    <div>\r\n                        <button className=\"formButton\" id=\"postTodo\" type='submit' disabled={formStatus.button} >\r\n                            Add Todo!\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n                <div className='todoLists'>\r\n                    <h1 style={{textDecoration: 'underline', textDecorationColor: '#fbff0e'}}>Todo</h1>\r\n                    <ul>\r\n                        {todo.map((data) => (\r\n                            <TodoCard\r\n                                data={data}\r\n                                handleDelete={handleDelete}\r\n                                handleMove={handleMove}\r\n                            />\r\n                        ))}                        \r\n                    </ul>\r\n                </div>\r\n                <div className='inProgressLists'>\r\n                    <h1 style={{textDecoration: 'underline', textDecorationColor: '#ff452c'}}>In Progress</h1>\r\n                    <ul>\r\n                        {inProgress.map((data) => (\r\n                            <TodoCard\r\n                                data={data}\r\n                                handleDelete={handleDelete}\r\n                                handleMove={handleMove}\r\n                            />\r\n                        ))}                        \r\n                    </ul>\r\n                </div>\r\n                <div className='inCompleteLists'>\r\n                    <h1 style={{textDecoration: 'underline', textDecorationColor: '#a9ff31'}}>Complete</h1>\r\n                   <ul>\r\n                        {complete.map((data) => (\r\n                            <TodoCard\r\n                                data={data}\r\n                                handleDelete={handleDelete}\r\n                                handleMove={handleMove}\r\n                            />\r\n                        ))}                        \r\n                    </ul> \r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n    \r\nexport default TodoList;","C:\\Users\\casey\\Desktop\\Engineering Projects\\Todo Lists\\Simply Manageable\\client\\src\\components\\todoCard.jsx",["27"],[],"import '../App.css'; \r\nfunction TodoCard({ data, handleDelete, handleMove }) {\r\n\r\n    const { _id, title, description,list,dueDate } = data;\r\n   \r\n\r\n    return (\r\n        <div key={_id}>\r\n            <div className=\"title-description\">\r\n                <h2>{title}</h2>\r\n                <p>{description}</p>\r\n                <p>{dueDate}</p>\r\n            </div>\r\n            <div className=\"button-container\">\r\n                <button name={_id} className=\"button\" onClick={handleDelete}>\r\n                    Delete\r\n                </button>\r\n            </div>\r\n            <div>\r\n                <select name={_id} className='dropdown' id={_id} onClick={handleMove}>\r\n                    <option value='ignore'>Move</option>\r\n                    <option value='Todo'>Todo</option>\r\n                    <option value='InProgress'>In Progress</option>\r\n                    <option value='Complete'>Complete</option>\r\n                </select>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TodoCard;",{"ruleId":"28","severity":1,"message":"29","line":1,"column":8,"nodeType":"30","messageId":"31","endLine":1,"endColumn":12},{"ruleId":"28","severity":1,"message":"32","line":207,"column":11,"nodeType":"30","messageId":"31","endLine":207,"endColumn":20},{"ruleId":"28","severity":1,"message":"33","line":4,"column":37,"nodeType":"30","messageId":"31","endLine":4,"endColumn":41},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'showDates' is assigned a value but never used.","'list' is assigned a value but never used."]