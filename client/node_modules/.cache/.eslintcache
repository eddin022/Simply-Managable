[{"/Users/caseyeddington/Documents/SE-Projects/Simply-Manageable/client/src/index.js":"1","/Users/caseyeddington/Documents/SE-Projects/Simply-Manageable/client/src/App.js":"2","/Users/caseyeddington/Documents/SE-Projects/Simply-Manageable/client/src/components/todos.jsx":"3","/Users/caseyeddington/Documents/SE-Projects/Simply-Manageable/client/src/components/todoCard.jsx":"4"},{"size":211,"mtime":1681521200384,"results":"5","hashOfConfig":"6"},{"size":171,"mtime":1681521200384,"results":"7","hashOfConfig":"6"},{"size":10691,"mtime":1681700716196,"results":"8","hashOfConfig":"6"},{"size":4973,"mtime":1681699618080,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"yamvrh",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},"/Users/caseyeddington/Documents/SE-Projects/Simply-Manageable/client/src/index.js",[],[],"/Users/caseyeddington/Documents/SE-Projects/Simply-Manageable/client/src/App.js",["25"],[],"import logo from './logo.svg';\nimport TodoList from './components/todos';\n\nfunction App() {\n  return (\n    <div>\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","/Users/caseyeddington/Documents/SE-Projects/Simply-Manageable/client/src/components/todos.jsx",["26"],[],"import React from \"react\";\nimport {useState,useEffect} from 'react';\nimport axios from 'axios'\nimport TodoCard from \"./todoCard\";\nimport '../App.css';\n\n\nfunction TodoList() {\n    const [todos,setTodos] = useState([]);\n    const [data,setData] = useState({ title: '', description: '', list:''});\n    const [update,setUpdate] = useState(false);\n    const [render,setRender] = useState(false);\n    const [formStatus,setFormStatus] = useState({\n        button: true,\n        inTodo: false,\n        inProgress: false,\n        inComplete: false\n    });\n\n    const todoListCheck = document.getElementById('inTodoList');\n    const inProgressListCheck = document.getElementById('inProgressList');\n    const inCompleteListCheck = document.getElementById('inCompleteList');\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        let dueDate = document.getElementById('dueDate');\n        data.dueDate= dueDate.value;\n        axios({\n            method: 'post',\n            url:'https://simply-managable.herokuapp.com/api/todo',\n            data:{\n                title: data.title,\n                description: data.description,\n                list: data.list,\n                dueDate: data.dueDate\n            }\n        });\n        axios\n                .get(\"https://simply-managable.herokuapp.com/api/todo\")\n                .then((res) => {\n                    console.log(res.data);\n                    setTodos(res.data);\n                })\n                .catch((err) => {\n                    console.log(err.message);\n                });\n        if (update) {\n            setUpdate(false)\n        }else{\n            setUpdate(true)\n        } \n        setData({\n            title:'',description:'',list:'',dueDate:''\n        });\n        inProgressListCheck.checked=false;\n        inCompleteListCheck.checked=false;\n        todoListCheck.checked=false;\n    };\n\n    useEffect(\n        function () {\n            axios\n                .get(\"https://simply-managable.herokuapp.com/api/todo\")\n                .then((res) => {\n                    console.log(res.data);\n                    setTodos(res.data);\n                })\n                .catch((err) => {\n                    console.log(err.message);\n                });\n        },\n        [update]\n    );\n\n    let todo = [];\n    let inProgress = [];\n    let complete = [];\n    \n    for (let i = 0; i < todos.length; i++) {\n        if (todos[i].list === 'Todo'){\n            todo = [...todo,todos[i]]\n        };\n\n        if (todos[i].list === 'InProgress'){\n            inProgress = [...inProgress,todos[i]]\n        };\n        if (todos[i].list === 'Complete'){\n            complete = [...complete,todos[i]]\n        };\n    };\n\n    function handleChange(e) {\n        setData((data) => ({...data, [e.target.name]: e.target.value}));\n    };\n\n    const handleTodoListCheck = (e) => {\n        inProgressListCheck.checked=false;\n        inCompleteListCheck.checked=false;\n        setFormStatus(existingValues => ({\n            ...existingValues,\n            button:false\n        }))\n\n        setData(existingValues => ({\n            ...existingValues,\n            list:'Todo'\n        }));\n\n        if(!todoListCheck.checked){\n            setFormStatus(existingValues => ({\n                ...existingValues,\n                button:true\n            })); \n        };\n    };\n\n    const handleInProgressListCheck = (e) => {\n        todoListCheck.checked=false\n        inCompleteListCheck.checked=false\n        setFormStatus(existingValues => ({\n            ...existingValues,\n            button:false\n        }))\n\n        setData(existingValues => ({\n            ...existingValues,\n            list:'InProgress'\n        }));\n\n        if(!inProgressListCheck.checked){\n            setFormStatus(existingValues => ({\n                ...existingValues,\n                button:true\n            })); \n        };\n    };\n\n    const handleInCompleteListCheck = (e) => {\n        inProgressListCheck.checked=false\n        todoListCheck.checked=false\n        setFormStatus(existingValues => ({\n            ...existingValues,\n            button:false\n        }))\n\n        setData(existingValues => ({\n            ...existingValues,\n            list:'Complete'\n        }));\n\n        if(!inCompleteListCheck.checked){\n            setFormStatus(existingValues => ({\n                ...existingValues,\n                button:true\n            })); \n        };\n    };\n\n    function handleDelete(e) {\n        axios.delete(`https://simply-managable.herokuapp.com/api/todo/${e.target.name}`);\n        setTodos((data) => {\n            return data.filter((todo) => todo._id !== e.target.name);\n        });\n    };\n\n    function handleMove(e) {\n        let mover = e.target.value\n        let moverId = e.target.name\n        \n        for (let i = 0; i < todos.length; i++) {\n            if ((todos[i]._id === moverId)&&(mover !== 'ignore')){\n                todos[i].list=mover\n    \n                const newTodo = {\n                    title: todos[i].title,\n                    description: todos[i].description,\n                    list: mover,\n                    dueDate: todos[i].dueDate\n                };\n                axios.put(`https://simply-managable.herokuapp.com/api/todo/${moverId}`,newTodo)\n                //axios.get(\"https://simply-managable.herokuapp.com/api/todo\")\n                console.log(newTodo)\n                if (render) {\n                    setRender(false)\n                }else{\n                    setRender(true)\n                }\n            }  \n        }\n    };\n\n    function handleEdit(e) {\n        console.log(e.target.name)\n        console.log('ABOVE!!')\n    }\n\n    const current = new Date();\n    const date1 =  `${current.getMonth()+1}/${current.getDate()}`;\n    const date2 =  `${current.getMonth()+1}/${current.getDate()+1}`;\n    const date3 =  `${current.getMonth()+1}/${current.getDate()+2}`;\n    const date4 =  `${current.getMonth()+1}/${current.getDate()+3}`;\n    const date5 =  `${current.getMonth()+1}/${current.getDate()+4}`;\n    const date6 =  `${current.getMonth()+1}/${current.getDate()+5}`;\n    const date7 =  `${current.getMonth()+1}/${current.getDate()+6}`;\n    const dates = [date1,date2,date3,date4,date5,date6,date7]\n\n    const showDates = () => {\n        for (let i = 0; i < todos.length; i++) {\n            let temp = todos[i].dueDate\n            let monthDay = `${temp.split('-')[1]}/${temp.split('-')[2]}`\n            for (let j = 0; j < dates.length; j++){\n                if (`0${dates[j]}` === monthDay){\n                    console.log('jes')\n                    console.log(todos[i])\n                    //make a dateCard and map over it\n                }\n            }\n        }\n    };\n\n    return (\n        <div className='App'>\n            <div>\n                <h1 className=\"main-header\">Simply Manageable</h1>\n            </div>\n            <div className=\"flex-container\">\n                <form className='form' onSubmit={handleSubmit}>\n                    <h1 style={{textDecoration: 'underline', textDecorationColor: 'azure'}} >Add </h1>\n                    <div>\n                        <input type='checkbox' value='inTodoList' id='inTodoList' name='inTodoList' onClick={handleTodoListCheck} />\n                        <label for='inTodoList'> Todo </label>\n                    </div>\n                    <div>\n                        <input type='checkbox' value='inProgressList' id='inProgressList' name='inProgressList'  onClick={handleInProgressListCheck} />\n                        <label for ='inProgressList'> In Progress </label>\n                    </div>\n                    <div>\n                        <input type='checkbox' value='inCompleteList' id='inCompleteList' name='inCompleteList'  onClick={handleInCompleteListCheck} />\n                        <label for ='inCompleteList'> Complete </label>\n                    </div>\n                    <br/>\n                    <div>\n                        <input className=\"formInput\" type='text' placeholder='Todo Name' name='title' value={data.title} onChange={handleChange} />\n                    </div>\n                    <div>\n                        <input className=\"formInput\" type='text' placeholder='Todo Description' name='description' value={data.description} onChange={handleChange} />                \n                    </div>\n                    <div>\n                        <input className=\"formDate\" type='date' placeholder='Due Date' name='date' id=\"dueDate\"/>\n                    </div>\n                    <br/>\n                    <div>\n                        <button className=\"formButton\" id=\"postTodo\" type='submit' disabled={formStatus.button} >\n                            Add Todo!\n                        </button>\n                    </div>\n                </form>\n                <div className='todoLists'>\n                    <h1 style={{textDecoration: 'underline', textDecorationColor: '#fbff0e'}}>Todo</h1>\n                    <ul>\n                        {todo.map((data) => (\n                            <TodoCard\n                                data={data}\n                                handleDelete={handleDelete}\n                                handleMove={handleMove}\n                                handleEdit={handleEdit}\n                            />\n                        ))}                        \n                    </ul>\n                </div>\n                <div className='inProgressLists'>\n                    <h1 style={{textDecoration: 'underline', textDecorationColor: '#ff452c'}}>In Progress</h1>\n                    <ul>\n                        {inProgress.map((data) => (\n                            <TodoCard\n                                data={data}\n                                handleDelete={handleDelete}\n                                handleMove={handleMove}\n                                handleEdit={handleEdit}\n                            />\n                        ))}                        \n                    </ul>\n                </div>\n                <div className='inCompleteLists'>\n                    <h1 style={{textDecoration: 'underline', textDecorationColor: '#a9ff31'}}>Complete</h1>\n                   <ul>\n                        {complete.map((data) => (\n                            <TodoCard\n                                data={data}\n                                handleDelete={handleDelete}\n                                handleMove={handleMove}\n                                handleEdit={handleEdit}\n                            />\n                        ))}                        \n                    </ul> \n                </div>\n            </div>\n        </div>\n    );\n}\n    \nexport default TodoList;","/Users/caseyeddington/Documents/SE-Projects/Simply-Manageable/client/src/components/todoCard.jsx",["27"],[],"import '../App.css'; \nimport {React, useState} from 'react';\nimport axios from 'axios';\n\nfunction TodoCard({ data, handleDelete, handleMove }) {\n\n    const { _id, title, description,list,dueDate } = data;\n    const [updateTitle,setUpdateTitle] = useState(0);\n    const [updateDesc, setUpdateDesc] = useState(0);\n    const [updateDate, setUpdateDate] = useState(0);\n\n   //click edit to 1) show title and description inputs 2) set\n    //ondoubleclick - 1) hide text 2) show input box 3) make input box == current title 4) allow users to edit 5) enter changes title 6)axios put request\n    \n    function handleTitleEdit() {\n        var textInput = document.getElementById(`${_id}_inputTxt`);\n        textInput.style.display = 'block';\n        textInput.style.marginTop = '1vw'\n        var textTitle = document.getElementById(`${_id}_title`);\n        textTitle.style.display = 'none';\n    };\n\n    function handleTitleChange(e) {\n        document.addEventListener(\"keydown\", function(event) {\n            var newTitle = e.target.value\n            if (event.code === 'Enter') {\n                var textInput = document.getElementById(`${_id}_inputTxt`);\n                textInput.style.display = 'none';\n                var textTitle = document.getElementById(`${_id}_title`);\n                textTitle.style.display = 'block';\n                data.title = newTitle\n\n                const newTodo = {\n                    title: data.title,\n                    description: data.description,\n                    list: data.list,\n                    dueDate: data.dueDate\n                };\n                axios.put(`https://simply-managable.herokuapp.com/api/todo/${_id}`,newTodo)\n                setUpdateTitle(updateTitle+1)\n            }\n        });\n    };\n\n    function handleDescEdit() {\n        var textInput = document.getElementById(`${_id}_inputDescTxt`);\n        textInput.style.display = 'block';\n        var textTitle = document.getElementById(`${_id}_desc`);\n        textTitle.style.display = 'none';\n    };\n\n    function handleDescChange(e) {\n        document.addEventListener(\"keydown\", function(event) {\n            var newDesc = e.target.value\n            if (event.code === 'Enter') {\n                var textInput = document.getElementById(`${_id}_inputDescTxt`);\n                textInput.style.display = 'none';\n                var textTitle = document.getElementById(`${_id}_desc`);\n                textTitle.style.display = 'block';\n                data.description = newDesc;\n\n                const newTodo = {\n                    title: data.title,\n                    description: data.description,\n                    list: data.list,\n                    dueDate: data.dueDate\n                };\n                axios.put(`https://simply-managable.herokuapp.com/api/todo/${_id}`,newTodo)\n                setUpdateDesc(updateDesc+1)\n            }\n        });\n    };\n\n    function handleDateClick() {\n        var dateInput = document.getElementById(`${_id}_dateInput`);\n        dateInput.style.display = 'block';\n    };\n\n    function handleDateChange(e) {\n        var dateInput = document.getElementById(`${_id}_dateInput`);\n        var newDate = e.target.value;\n        data.dueDate = newDate;\n\n        const newTodo = {\n            title: data.title,\n            description: data.description,\n            list: data.list,\n            dueDate: data.dueDate\n        };\n        axios.put(`https://simply-managable.herokuapp.com/api/todo/${_id}`,newTodo)        \n        dateInput.style.display= 'none';\n        setUpdateDate(updateDate+1)\n    };\n\n\n\n    return (\n        <div key={_id}>\n            <div className=\"title-description\">\n                <h2 className='show' onDoubleClick={handleTitleEdit} id={`${_id}_title`}>{title}</h2>\n                <input type='text' name={_id+'inputTxt'} id={`${_id}_inputTxt`} className='hide' onChange={handleTitleChange}></input>\n                <p onDoubleClick={handleDescEdit} id={`${_id}_desc`}>{description}</p>\n                <input type='text' id={`${_id}_inputDescTxt`} className='hide' onChange={handleDescChange}></input>\n                <p onDoubleClick={handleDateClick} id={`${_id}_date`}>{dueDate}</p>\n                <input type='date' id={`${_id}_dateInput`} className='hide' onChange={handleDateChange}></input>\n            </div>\n            <div className=\"button-container\">\n                <button name={_id} className=\"button\" onClick={handleDelete}>\n                    Delete\n                </button>\n            </div>\n            <div>\n                <select name={_id} class='browser-default' className='dropdown' id={_id} onChange={handleMove}>\n                    <option value='ignore'>Move</option>\n                    <option value='Todo'>Todo</option>\n                    <option value='InProgress'>In Progress</option>\n                    <option value='Complete'>Complete</option>\n                </select>\n            </div>\n        </div>\n    );\n}\n\nexport default TodoCard;",{"ruleId":"28","severity":1,"message":"29","line":1,"column":8,"nodeType":"30","messageId":"31","endLine":1,"endColumn":12},{"ruleId":"28","severity":1,"message":"32","line":207,"column":11,"nodeType":"30","messageId":"31","endLine":207,"endColumn":20},{"ruleId":"28","severity":1,"message":"33","line":7,"column":37,"nodeType":"30","messageId":"31","endLine":7,"endColumn":41},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'showDates' is assigned a value but never used.","'list' is assigned a value but never used."]